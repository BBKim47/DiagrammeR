% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_attr_dfs.R
\name{get_attr_dfs}
\alias{get_attr_dfs}
\title{Get data frames bound to node attributes}
\usage{
get_attr_dfs(graph, node_id = NULL, edge_id = NULL,
  return_format = "single_tbl")
}
\arguments{
\item{graph}{a graph object of class
\code{dgr_graph}.}

\item{node_id}{a vector of node ID values in
which data frames are bound as node attrs.}

\item{edge_id}{a vector of edge ID values in
which data frames are bound as edge attrs.}

\item{return_format}{the format in which to
return the results of several data frames. These
can either be: (1) \code{single_tbl} (a tibble
object resulting from a `bind_rows` operation of
multiple data frames), (2) \code{single_df}
(a single data frame which all of the data frame
data), (3) \code{list_tbl} (a list object with a
tibble object present in each list component),
and (4) \code{list_col} (a tibble with a column
of tibble objects).}
}
\value{
either a tibble, a data frame, or a list.
}
\description{
From a graph object of class
\code{dgr_graph}, get one or more data frames
already bound as node and/or edge attribute
values given graph node and/or edges.
}
\examples{
# Create a node data frame (ndf)
ndf <-
  create_node_df(
    n = 4,
    type = "basic",
    label = TRUE,
    value = c(3.5, 2.6, 9.4, 2.7))

# Create an edge data frame (edf)
edf <-
  create_edge_df(
    from = c(1, 2, 3),
    to = c(4, 3, 1),
    rel = "leading_to")

# Create a graph
graph <-
  create_graph(
    nodes_df = ndf,
    edges_df = edf)

# Create 2 simple data frames to add as
# node attributes
df_1 <-
  data.frame(
    a = c("one", "two"),
    b = c(1, 2),
    stringsAsFactors = FALSE)

df_2 <-
  data.frame(
    a = c("three", "four"),
    b = c(3, 4),
    stringsAsFactors = FALSE)

# Bind the data frame as a node attribute
# of nodes `1` and `4`
graph <-
  graph \%>\%
  set_df_as_node_attr(
    node = 1,
    df = df_1) \%>\%
  set_df_as_node_attr(
    node = 4,
    df = df_2)

# Get a single tibble by specifying the
# nodes from which there are data frames
# bound as node attributes
get_attr_dfs(
  graph,
  node_id = c(1, 4),
  return_format = "single_tbl")
#> # A tibble: 4 Ã— 5
#>   node_id  type label     a     b
#>     <int> <chr> <chr> <chr> <dbl>
#> 1       1 basic     1   one     1
#> 2       1 basic     1   two     2
#> 3       4 basic     4 three     3
#> 4       4 basic     4  four     4

}

