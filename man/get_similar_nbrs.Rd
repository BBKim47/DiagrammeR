% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_similar_nbrs.R
\name{get_similar_nbrs}
\alias{get_similar_nbrs}
\title{Get neighboring nodes based on node attribute
similarity}
\usage{
get_similar_nbrs(graph, node, node_attr, tol_abs = NULL, tol_pct = NULL)
}
\arguments{
\item{graph}{a graph object of class
\code{dgr_graph} that is created using
\code{create_graph}.}

\item{node_attr}{the name of the node attribute
to use to compare with adjacent nodes.}

\item{tol_abs}{if the values contained in the node
attribute \code{node_attr} are numeric, one can
optionally supply a numeric vector of length 2 that
provides a lower and upper numeric bound as criteria
for neighboring node similarity to the starting
node.}

\item{tol_pct}{if the values contained in the node
attribute \code{node_attr} are numeric, one can
optionally supply a numeric vector of length 2 that
specifies lower and upper bounds as negative and
positive percentage changes to the value of the
starting node. These bounds serve as criteria for
neighboring node similarity to the starting node.}
}
\value{
a graph object of class \code{dgr_graph}.
}
\description{
With a graph a single node serving as
the starting point, get those nodes in a potential
neighborhood of nodes (adjacent to the starting
node) that have a common or similar (within
threshold values) node attribute to the starting
node.
}
\examples{
\dontrun{
library(magrittr)

# Create a graph with a tree structure that's
# 3 levels deep (begins with node `1`, branching
# by 2 nodes at each level)
#
# The resulting graph contains 15 nodes, numbered
# `1` through `15`; one main branch has all its 7
# nodes colored `red`, the other main branch has
# 3 of its 7 nodes colored `blue`
#
# A schematic of the graph:
#
#   red->[7 red nodes]
#    /
# [1]
#    \\
#  blue->[3 blue nodes, 4 black nodes]
#
graph <-
  create_graph() \%>\%
  add_node("A") \%>\%
  select_nodes \%>\%
  add_n_nodes_from_selection(2, "B") \%>\%
  clear_selection \%>\%
  select_nodes("type", "B") \%>\%
  add_n_nodes_from_selection(2, "C") \%>\%
  clear_selection \%>\%
  select_nodes("type", "C") \%>\%
  add_n_nodes_from_selection(2, "D") \%>\%
  clear_selection \%>\%
  select_nodes_by_id(
    c(2, 4, 5, 8, 9, 10, 11)) \%>\%
  set_node_attr_ws(
    node_attr = 'color',
    value = 'red') \%>\%
  clear_selection \%>\%
  select_nodes_by_id(
    c(3, 6, 7)) \%>\%
  set_node_attr_ws(
    node_attr = 'color',
    value = 'blue') \%>\%
  select_edges(from = 1, to = 2) \%>\%
  set_edge_attr_ws(
    edge_attr = 'color',
    value = 'red') \%>\%
  clear_selection \%>\%
  select_edges(from = 1, to = 3) \%>\%
  set_edge_attr_ws(
    edge_attr = 'color',
    value = 'blue') \%>\%
  clear_selection

# Get all nodes with the node attribute
# `color = red`; Begin at node `1` and traverse
# along the red edge to the first `red` node, then,
# find the larger neighborhood of red nodes (the
# collection of nodes comprises the entire set of 7
# red nodes that have adjacency to each other)
graph \%>\%
  select_nodes_by_id(1) \%>\%
  trav_out_edge('color', 'red') \%>\%
  trav_in_node \%>\%
  get_similar_nbrs(
    node = get_selection(.)[[1]],
    node_attr = 'color')
#> [1] "2"  "4"  "5"  "8"  "9"  "10" "11"

# Get all nodes with the attribute `color = blue`;
# Begin at node `1` and traverse along the blue edge
# to the first `blue` node, then, find the larger
# neighborhood of blue nodes (it comprises the
# entire set of 3 blue nodes that have adjacency
# to each other)
graph \%>\%
  select_nodes_by_id(1) \%>\%
  trav_out_edge('color', 'blue') \%>\%
  trav_in_node \%>\%
  get_similar_nbrs(
    node = get_selection(.)[[1]],
    node_attr = 'color')
#> [1] "3" "6" "7"

# Getting similar neighbors can also be done through
# numerical comparisons; start with creating a
# random, directed graph with 18 nodes and 22 edges
random_graph <-
  create_random_graph(
    n = 18,
    m = 22,
    directed = TRUE,
    fully_connected = TRUE,
    set_seed = 20) \%>\%
  set_global_graph_attr(
    'graph', 'layout', 'sfdp') \%>\%
  set_global_graph_attr(
    'graph', 'overlap', 'false')

# This graph cannot be shown in this help page
# but you may be interested in displaying it with
# `render_graph()`
random_graph \%>\% render_graph

# The `create_random_graph()` function randomly
# assigns numerical values to all nodes (as the
# `value` attribute) from 0 to 10 and to 1 decimal
# place. By starting with node (`8`), we can test
# whether any nodes adjacent and beyond are
# numerically equivalent in `value`
random_graph \%>\%
  get_similar_nbrs(
    node = 8,
    node_attr = 'value')
#> [1] "8"

# There were no additional nodes aside from `8`
# since its neighbors did not have `value = 1.0` as
# an attribute
#
# We can, however, set a tolerance for ascribing
# similarly by using either the `tol_abs` or `tol_pct`
# arguments (the first applies absolute lower and upper
# bounds from the value in the starting node and the
# latter uses a percentage difference to do the same);
# Try setting `tol_abs` with a fairly large range to
# determine if several nodes can be selected
random_graph \%>\%
  get_similar_nbrs(
    node = 8,
    node_attr = 'value',
    tol_abs = c(3, 3))
#> [1] "8"  "9"  "13" "17" "10" "18" "3"

# That resulted in a fairly large set of 7
# neigboring nodes; For sake of example, setting the
# range to be very large will effectively return all
# 18 nodes in the graph
random_graph \%>\%
  get_similar_nbrs(
    node = 8,
    node_attr = 'value',
    tol_abs = c(10, 10)) \%>\%
    length
#> [1] 18
}
}

