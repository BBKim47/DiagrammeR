% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/trav_out.R
\name{trav_out}
\alias{trav_out}
\title{Traverse from one or more selected nodes onto
adjacent, outward nodes}
\usage{
trav_out(graph, conditions = NULL)
}
\arguments{
\item{graph}{a graph object of class \code{dgr_graph}
that is created using \code{create_graph}.}

\item{conditions}{an option to use filtering
conditions for the traversal.}
}
\value{
a graph object of class \code{dgr_graph}.
}
\description{
From a graph object of class
\code{dgr_graph} move along outward edges from one
or more nodes present in a selection to other
connected nodes, replacing the current nodes in
the selection with those nodes traversed to. An
optional filter by node attribute can limit the set
of nodes traversed to.
}
\examples{
library(dplyr)

# Set a seed
set.seed(23)

# Create a simple graph
graph <-
  create_graph() \%>\%
  add_n_nodes(
    2, type = "a",
    label = c("asd", "iekd")) \%>\%
  add_n_nodes(
    3, type = "b",
    label = c("idj", "edl", "ohd")) \%>\%
  add_edges_w_string(
    "1->2 1->3 2->4 2->5 3->5",
    rel = c(NA, "A", "B", "C", "D"))

# Create a data frame with node ID values
# representing the graph edges (with `from`
# and `to` columns), and, a set of numeric values
df_edges <-
  data.frame(
    from = c(1, 1, 2, 2, 3),
    to = c(2, 3, 4, 5, 5),
    values = round(rnorm(5, 5), 2))

# Create a data frame with node ID values
# representing the graph nodes (with the `id`
# columns), and, a set of numeric values
df_nodes <-
  data.frame(
    id = 1:5,
    values = round(rnorm(5, 7), 2))

# Join the data frame to the graph's internal
# edge data frame (edf)
graph <-
  graph \%>\%
  join_edge_attrs(df_edges) \%>\%
  join_node_attrs(df_nodes)

get_node_df(graph)
#>   id type label values
#> 1  1    a   asd   8.11
#> 2  2    a  iekd   6.72
#> 3  3    b   idj   8.02
#> 4  4    b   edl   7.05
#> 5  5    b   ohd   8.58

get_edge_df(graph)
#>   from to  rel values
#> 1    1  2 <NA>   5.19
#> 2    1  3    A   4.57
#> 3    2  4    B   5.91
#> 4    2  5    C   6.79
#> 5    3  5    D      6

# Perform a simple traversal from node `3`
# to outward adjacent nodes with no conditions
# on the nodes traversed to
graph \%>\%
  select_nodes_by_id(3) \%>\%
  trav_out \%>\%
  get_selection
#> [1] 5

# Traverse from node `1` to outbound
# nodes, filtering to those nodes that have
# numeric values greater than `7.0` for
# the `values` node attribute
graph \%>\%
  select_nodes_by_id(1) \%>\%
  trav_out(
    conditions = "values > 7.0") \%>\%
  get_selection
#> [1] 3

# Traverse from node `1` to any outbound
# nodes, filtering to those nodes that
# have a `type` attribute of `b`
graph \%>\%
  select_nodes_by_id(1) \%>\%
  trav_out(
    conditions = "type == 'b'") \%>\%
  get_selection
#> [1] 3

# Traverse from node `2` to any outbound
# nodes, filtering to those nodes that
# have a degree of `1`
graph \%>\%
  {
  node_degrees <-
    node_info(.) \%>\%
    dplyr::select(id, deg)
  join_node_attrs(., node_degrees)
  } \%>\%
  select_nodes_by_id(2) \%>\%
  trav_out(
    conditions = "deg == 1") \%>\%
  get_selection
#> [1] 4

# Traverse from node `2` to any outbound
# nodes, and use multiple conditions for the
# traversal (using a vector in `conditions`
# creates a set of `AND` conditions)
graph \%>\%
  select_nodes_by_id(2) \%>\%
  trav_out(
    conditions = c(
      "type == 'a'",
      "values > 8.0")) \%>\%
  get_selection
#> [1] 2

# Traverse from node `2` to any outbound
# nodes, and use multiple conditions with
# a single-length vector (here, using a
# `|` to create a set of `OR` conditions)
graph \%>\%
  select_nodes_by_id(2) \%>\%
  trav_out(
    conditions = c(
      "type == 'b' | values > 8.0")) \%>\%
  get_selection
#> [1] 4 5

# Traverse from node `2` to any outbound
# nodes, and use a regular expression as
# a filtering condition
graph \%>\%
  select_nodes_by_id(2) \%>\%
  trav_out(
    conditions = "grepl('..d', label)") \%>\%
  get_selection
#> [1] 5
}

