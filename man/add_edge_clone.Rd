% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_edge_clone.R
\name{add_edge_clone}
\alias{add_edge_clone}
\title{Add a clone of an existing edge to the graph}
\usage{
add_edge_clone(graph, edge, from, to)
}
\arguments{
\item{graph}{a graph object of class
\code{dgr_graph}.}

\item{edge}{an edge ID corresponding to the graph edge
to be cloned.}

\item{from}{the outgoing node from which the edge
is connected.}

\item{to}{the incoming nodes to which each edge
is connected.}
}
\value{
a graph object of class \code{dgr_graph}.
}
\description{
Add a new edge to a graph object of
class \code{dgr_graph} which is a clones of an edge
already in the graph. All edge attributes are
preserved.
}
\examples{
# Create a graph with a path of
# nodes; supply a common `rel`
# edge attribute for all edges
# in this path
graph <-
  create_graph() \%>\%
  add_path(
    n = 3,
    rel = "a") \%>\%
  select_last_edges_created() \%>\%
  set_edge_attrs(
    edge_attr = "color",
    value = "steelblue") \%>\%
  clear_selection()

# Display the graph's internal
# edge data frame
graph \%>\%
  get_edge_df()
#>   id from to rel     color
#> 1  1    1  2   a steelblue
#> 2  2    2  3   a steelblue

# Create a new node (`3`) and then
# create an edge between it and
# node `1` while reusing the edge
# attributes of edge `1` -> `2`
# (edge ID `1`)
graph <-
  graph \%>\%
  add_node() \%>\%
  add_edge_clone(
    edge = 1,
    from = 3,
      to = 1)

# Display the graph's internal
# edge data frame
graph \%>\%
  get_edge_df()
#>   id from to rel     color
#> 1  1    1  2   a steelblue
#> 2  2    2  3   a steelblue
#> 3  3    3  1   a steelblue
}
