% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/trav_in.R
\name{trav_in}
\alias{trav_in}
\title{Traverse inward to a selected node, skipping over edges, and creating
a new node selection}
\usage{
trav_in(graph, node_attr = NULL, match = NULL)
}
\arguments{
\item{graph}{a graph object of class \code{dgr_graph} that is created
using \code{create_graph}.}

\item{node_attr}{an optional character vector of node attribute values for
filtering the node ID values returned.}

\item{match}{an option to provide a logical expression with a comparison
operator (\code{>}, \code{<}, \code{==}, or \code{!=}) followed by a number
for numerical filtering, or, a character string for filtering the edges
returned through string matching.}
}
\value{
a graph object of class \code{dgr_graph}.
}
\description{
From a graph object of class \code{dgr_graph} move outward
from one or more nodes present in a selection to other nodes, replacing
the current nodes in the selection with those nodes traversed to.
}
\examples{
\dontrun{
library(magrittr)

# Create a simple graph
graph <-
  create_graph() \%>\%
  add_node_df(create_nodes(1:6)) \%>\%
  add_edge_df(create_edges(c("1", "1", "3", "4", "4"),
                           c("2", "3", "4", "5", "6")))

# Starting from node "1", traverse nodes as far as possible then return
# back to node "1"
graph \%>\% select_nodes("1") \%>\%
  trav_out() \%>\% trav_out() \%>\% trav_out() \%>\%
  trav_in() \%>\% trav_in() \%>\% trav_in() \%>\%
  get_node_attr_from_selection()
#>   nodes type label
#> 1     1          1
}
}

